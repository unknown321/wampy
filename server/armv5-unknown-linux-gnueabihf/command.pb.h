// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: command.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_command_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_command_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_command_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_command_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_command_2eproto;
namespace Command {
class Command;
struct CommandDefaultTypeInternal;
extern CommandDefaultTypeInternal _Command_default_instance_;
class FeatureBigCover;
struct FeatureBigCoverDefaultTypeInternal;
extern FeatureBigCoverDefaultTypeInternal _FeatureBigCover_default_instance_;
class FeatureShowClock;
struct FeatureShowClockDefaultTypeInternal;
extern FeatureShowClockDefaultTypeInternal _FeatureShowClock_default_instance_;
class Playlist;
struct PlaylistDefaultTypeInternal;
extern PlaylistDefaultTypeInternal _Playlist_default_instance_;
class Seek;
struct SeekDefaultTypeInternal;
extern SeekDefaultTypeInternal _Seek_default_instance_;
class SetVolume;
struct SetVolumeDefaultTypeInternal;
extern SetVolumeDefaultTypeInternal _SetVolume_default_instance_;
class Status;
struct StatusDefaultTypeInternal;
extern StatusDefaultTypeInternal _Status_default_instance_;
class Track;
struct TrackDefaultTypeInternal;
extern TrackDefaultTypeInternal _Track_default_instance_;
class WindowStatus;
struct WindowStatusDefaultTypeInternal;
extern WindowStatusDefaultTypeInternal _WindowStatus_default_instance_;
}  // namespace Command
PROTOBUF_NAMESPACE_OPEN
template<> ::Command::Command* Arena::CreateMaybeMessage<::Command::Command>(Arena*);
template<> ::Command::FeatureBigCover* Arena::CreateMaybeMessage<::Command::FeatureBigCover>(Arena*);
template<> ::Command::FeatureShowClock* Arena::CreateMaybeMessage<::Command::FeatureShowClock>(Arena*);
template<> ::Command::Playlist* Arena::CreateMaybeMessage<::Command::Playlist>(Arena*);
template<> ::Command::Seek* Arena::CreateMaybeMessage<::Command::Seek>(Arena*);
template<> ::Command::SetVolume* Arena::CreateMaybeMessage<::Command::SetVolume>(Arena*);
template<> ::Command::Status* Arena::CreateMaybeMessage<::Command::Status>(Arena*);
template<> ::Command::Track* Arena::CreateMaybeMessage<::Command::Track>(Arena*);
template<> ::Command::WindowStatus* Arena::CreateMaybeMessage<::Command::WindowStatus>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Command {

enum Type : int {
  CMD_UNKNOWN = 0,
  CMD_GET_WINDOW_STATUS = 1,
  CMD_HIDE_WINDOW = 2,
  CMD_SHOW_WINDOW = 3,
  CMD_GET_STATUS = 4,
  CMD_TEST = 5,
  CMD_SET_VOLUME = 6,
  CMD_SEEK = 7,
  CMD_TOGGLE_SHUFFLE = 8,
  CMD_TOGGLE_REPEAT = 9,
  CMD_NEXT_TRACK = 10,
  CMD_PREV_TRACK = 11,
  CMD_PLAY = 12,
  CMD_PAUSE = 13,
  CMD_STOP = 14,
  CMD_FEATURE_BIG_COVER = 15,
  CMD_FEATURE_SHOW_CLOCK = 16,
  CMD_FAILURE = 17
};
bool Type_IsValid(int value);
constexpr Type Type_MIN = CMD_UNKNOWN;
constexpr Type Type_MAX = CMD_FAILURE;
constexpr int Type_ARRAYSIZE = Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Type_descriptor();
template<typename T>
inline const std::string& Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Type_descriptor(), enum_t_value);
}
inline bool Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Type>(
    Type_descriptor(), name, value);
}
enum ResponseCode : int {
  UNKNOWN = 0,
  FAIL = 1,
  OK = 2
};
bool ResponseCode_IsValid(int value);
constexpr ResponseCode ResponseCode_MIN = UNKNOWN;
constexpr ResponseCode ResponseCode_MAX = OK;
constexpr int ResponseCode_ARRAYSIZE = ResponseCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResponseCode_descriptor();
template<typename T>
inline const std::string& ResponseCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ResponseCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ResponseCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ResponseCode_descriptor(), enum_t_value);
}
inline bool ResponseCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ResponseCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ResponseCode>(
    ResponseCode_descriptor(), name, value);
}
enum WindowVisible : int {
  VISIBILITY_UNKNOWN = 0,
  VISIBILITY_YES = 1,
  VISIBILITY_NO = 2
};
bool WindowVisible_IsValid(int value);
constexpr WindowVisible WindowVisible_MIN = VISIBILITY_UNKNOWN;
constexpr WindowVisible WindowVisible_MAX = VISIBILITY_NO;
constexpr int WindowVisible_ARRAYSIZE = WindowVisible_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WindowVisible_descriptor();
template<typename T>
inline const std::string& WindowVisible_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WindowVisible>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WindowVisible_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    WindowVisible_descriptor(), enum_t_value);
}
inline bool WindowVisible_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WindowVisible* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<WindowVisible>(
    WindowVisible_descriptor(), name, value);
}
// ===================================================================

class Command final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Command.Command) */ {
 public:
  inline Command() : Command(nullptr) {}
  ~Command() override;
  explicit PROTOBUF_CONSTEXPR Command(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Command(const Command& from);
  Command(Command&& from) noexcept
    : Command() {
    *this = ::std::move(from);
  }

  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command& operator=(Command&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Command& default_instance() {
    return *internal_default_instance();
  }
  enum MsgCase {
    kWindowStatus = 3,
    kStatus = 4,
    kSetVolume = 5,
    kSeek = 6,
    kFeatureBigCover = 7,
    kFeatureShowClock = 8,
    MSG_NOT_SET = 0,
  };

  static inline const Command* internal_default_instance() {
    return reinterpret_cast<const Command*>(
               &_Command_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Command& a, Command& b) {
    a.Swap(&b);
  }
  inline void Swap(Command* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Command* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Command>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Command& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Command& from) {
    Command::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Command.Command";
  }
  protected:
  explicit Command(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kCodeFieldNumber = 2,
    kWindowStatusFieldNumber = 3,
    kStatusFieldNumber = 4,
    kSetVolumeFieldNumber = 5,
    kSeekFieldNumber = 6,
    kFeatureBigCoverFieldNumber = 7,
    kFeatureShowClockFieldNumber = 8,
  };
  // required .Command.Type Type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::Command::Type type() const;
  void set_type(::Command::Type value);
  private:
  ::Command::Type _internal_type() const;
  void _internal_set_type(::Command::Type value);
  public:

  // required .Command.ResponseCode Code = 2;
  bool has_code() const;
  private:
  bool _internal_has_code() const;
  public:
  void clear_code();
  ::Command::ResponseCode code() const;
  void set_code(::Command::ResponseCode value);
  private:
  ::Command::ResponseCode _internal_code() const;
  void _internal_set_code(::Command::ResponseCode value);
  public:

  // .Command.WindowStatus WindowStatus = 3;
  bool has_windowstatus() const;
  private:
  bool _internal_has_windowstatus() const;
  public:
  void clear_windowstatus();
  const ::Command::WindowStatus& windowstatus() const;
  PROTOBUF_NODISCARD ::Command::WindowStatus* release_windowstatus();
  ::Command::WindowStatus* mutable_windowstatus();
  void set_allocated_windowstatus(::Command::WindowStatus* windowstatus);
  private:
  const ::Command::WindowStatus& _internal_windowstatus() const;
  ::Command::WindowStatus* _internal_mutable_windowstatus();
  public:
  void unsafe_arena_set_allocated_windowstatus(
      ::Command::WindowStatus* windowstatus);
  ::Command::WindowStatus* unsafe_arena_release_windowstatus();

  // .Command.Status Status = 4;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::Command::Status& status() const;
  PROTOBUF_NODISCARD ::Command::Status* release_status();
  ::Command::Status* mutable_status();
  void set_allocated_status(::Command::Status* status);
  private:
  const ::Command::Status& _internal_status() const;
  ::Command::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::Command::Status* status);
  ::Command::Status* unsafe_arena_release_status();

  // .Command.SetVolume SetVolume = 5;
  bool has_setvolume() const;
  private:
  bool _internal_has_setvolume() const;
  public:
  void clear_setvolume();
  const ::Command::SetVolume& setvolume() const;
  PROTOBUF_NODISCARD ::Command::SetVolume* release_setvolume();
  ::Command::SetVolume* mutable_setvolume();
  void set_allocated_setvolume(::Command::SetVolume* setvolume);
  private:
  const ::Command::SetVolume& _internal_setvolume() const;
  ::Command::SetVolume* _internal_mutable_setvolume();
  public:
  void unsafe_arena_set_allocated_setvolume(
      ::Command::SetVolume* setvolume);
  ::Command::SetVolume* unsafe_arena_release_setvolume();

  // .Command.Seek Seek = 6;
  bool has_seek() const;
  private:
  bool _internal_has_seek() const;
  public:
  void clear_seek();
  const ::Command::Seek& seek() const;
  PROTOBUF_NODISCARD ::Command::Seek* release_seek();
  ::Command::Seek* mutable_seek();
  void set_allocated_seek(::Command::Seek* seek);
  private:
  const ::Command::Seek& _internal_seek() const;
  ::Command::Seek* _internal_mutable_seek();
  public:
  void unsafe_arena_set_allocated_seek(
      ::Command::Seek* seek);
  ::Command::Seek* unsafe_arena_release_seek();

  // .Command.FeatureBigCover FeatureBigCover = 7;
  bool has_featurebigcover() const;
  private:
  bool _internal_has_featurebigcover() const;
  public:
  void clear_featurebigcover();
  const ::Command::FeatureBigCover& featurebigcover() const;
  PROTOBUF_NODISCARD ::Command::FeatureBigCover* release_featurebigcover();
  ::Command::FeatureBigCover* mutable_featurebigcover();
  void set_allocated_featurebigcover(::Command::FeatureBigCover* featurebigcover);
  private:
  const ::Command::FeatureBigCover& _internal_featurebigcover() const;
  ::Command::FeatureBigCover* _internal_mutable_featurebigcover();
  public:
  void unsafe_arena_set_allocated_featurebigcover(
      ::Command::FeatureBigCover* featurebigcover);
  ::Command::FeatureBigCover* unsafe_arena_release_featurebigcover();

  // .Command.FeatureShowClock FeatureShowClock = 8;
  bool has_featureshowclock() const;
  private:
  bool _internal_has_featureshowclock() const;
  public:
  void clear_featureshowclock();
  const ::Command::FeatureShowClock& featureshowclock() const;
  PROTOBUF_NODISCARD ::Command::FeatureShowClock* release_featureshowclock();
  ::Command::FeatureShowClock* mutable_featureshowclock();
  void set_allocated_featureshowclock(::Command::FeatureShowClock* featureshowclock);
  private:
  const ::Command::FeatureShowClock& _internal_featureshowclock() const;
  ::Command::FeatureShowClock* _internal_mutable_featureshowclock();
  public:
  void unsafe_arena_set_allocated_featureshowclock(
      ::Command::FeatureShowClock* featureshowclock);
  ::Command::FeatureShowClock* unsafe_arena_release_featureshowclock();

  void clear_msg();
  MsgCase msg_case() const;
  // @@protoc_insertion_point(class_scope:Command.Command)
 private:
  class _Internal;
  void set_has_windowstatus();
  void set_has_status();
  void set_has_setvolume();
  void set_has_seek();
  void set_has_featurebigcover();
  void set_has_featureshowclock();

  inline bool has_msg() const;
  inline void clear_has_msg();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int type_;
    int code_;
    union MsgUnion {
      constexpr MsgUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::Command::WindowStatus* windowstatus_;
      ::Command::Status* status_;
      ::Command::SetVolume* setvolume_;
      ::Command::Seek* seek_;
      ::Command::FeatureBigCover* featurebigcover_;
      ::Command::FeatureShowClock* featureshowclock_;
    } msg_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_command_2eproto;
};
// -------------------------------------------------------------------

class FeatureBigCover final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Command.FeatureBigCover) */ {
 public:
  inline FeatureBigCover() : FeatureBigCover(nullptr) {}
  ~FeatureBigCover() override;
  explicit PROTOBUF_CONSTEXPR FeatureBigCover(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FeatureBigCover(const FeatureBigCover& from);
  FeatureBigCover(FeatureBigCover&& from) noexcept
    : FeatureBigCover() {
    *this = ::std::move(from);
  }

  inline FeatureBigCover& operator=(const FeatureBigCover& from) {
    CopyFrom(from);
    return *this;
  }
  inline FeatureBigCover& operator=(FeatureBigCover&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FeatureBigCover& default_instance() {
    return *internal_default_instance();
  }
  static inline const FeatureBigCover* internal_default_instance() {
    return reinterpret_cast<const FeatureBigCover*>(
               &_FeatureBigCover_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FeatureBigCover& a, FeatureBigCover& b) {
    a.Swap(&b);
  }
  inline void Swap(FeatureBigCover* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FeatureBigCover* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FeatureBigCover* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FeatureBigCover>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FeatureBigCover& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FeatureBigCover& from) {
    FeatureBigCover::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FeatureBigCover* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Command.FeatureBigCover";
  }
  protected:
  explicit FeatureBigCover(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnabledFieldNumber = 1,
  };
  // required bool enabled = 1;
  bool has_enabled() const;
  private:
  bool _internal_has_enabled() const;
  public:
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Command.FeatureBigCover)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool enabled_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_command_2eproto;
};
// -------------------------------------------------------------------

class FeatureShowClock final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Command.FeatureShowClock) */ {
 public:
  inline FeatureShowClock() : FeatureShowClock(nullptr) {}
  ~FeatureShowClock() override;
  explicit PROTOBUF_CONSTEXPR FeatureShowClock(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FeatureShowClock(const FeatureShowClock& from);
  FeatureShowClock(FeatureShowClock&& from) noexcept
    : FeatureShowClock() {
    *this = ::std::move(from);
  }

  inline FeatureShowClock& operator=(const FeatureShowClock& from) {
    CopyFrom(from);
    return *this;
  }
  inline FeatureShowClock& operator=(FeatureShowClock&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FeatureShowClock& default_instance() {
    return *internal_default_instance();
  }
  static inline const FeatureShowClock* internal_default_instance() {
    return reinterpret_cast<const FeatureShowClock*>(
               &_FeatureShowClock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FeatureShowClock& a, FeatureShowClock& b) {
    a.Swap(&b);
  }
  inline void Swap(FeatureShowClock* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FeatureShowClock* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FeatureShowClock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FeatureShowClock>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FeatureShowClock& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FeatureShowClock& from) {
    FeatureShowClock::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FeatureShowClock* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Command.FeatureShowClock";
  }
  protected:
  explicit FeatureShowClock(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnabledFieldNumber = 1,
  };
  // required bool enabled = 1;
  bool has_enabled() const;
  private:
  bool _internal_has_enabled() const;
  public:
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Command.FeatureShowClock)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool enabled_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_command_2eproto;
};
// -------------------------------------------------------------------

class WindowStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Command.WindowStatus) */ {
 public:
  inline WindowStatus() : WindowStatus(nullptr) {}
  ~WindowStatus() override;
  explicit PROTOBUF_CONSTEXPR WindowStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WindowStatus(const WindowStatus& from);
  WindowStatus(WindowStatus&& from) noexcept
    : WindowStatus() {
    *this = ::std::move(from);
  }

  inline WindowStatus& operator=(const WindowStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline WindowStatus& operator=(WindowStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WindowStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const WindowStatus* internal_default_instance() {
    return reinterpret_cast<const WindowStatus*>(
               &_WindowStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(WindowStatus& a, WindowStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(WindowStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WindowStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WindowStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WindowStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WindowStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WindowStatus& from) {
    WindowStatus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WindowStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Command.WindowStatus";
  }
  protected:
  explicit WindowStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVisibleFieldNumber = 1,
  };
  // required .Command.WindowVisible Visible = 1;
  bool has_visible() const;
  private:
  bool _internal_has_visible() const;
  public:
  void clear_visible();
  ::Command::WindowVisible visible() const;
  void set_visible(::Command::WindowVisible value);
  private:
  ::Command::WindowVisible _internal_visible() const;
  void _internal_set_visible(::Command::WindowVisible value);
  public:

  // @@protoc_insertion_point(class_scope:Command.WindowStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int visible_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_command_2eproto;
};
// -------------------------------------------------------------------

class SetVolume final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Command.SetVolume) */ {
 public:
  inline SetVolume() : SetVolume(nullptr) {}
  ~SetVolume() override;
  explicit PROTOBUF_CONSTEXPR SetVolume(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetVolume(const SetVolume& from);
  SetVolume(SetVolume&& from) noexcept
    : SetVolume() {
    *this = ::std::move(from);
  }

  inline SetVolume& operator=(const SetVolume& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetVolume& operator=(SetVolume&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetVolume& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetVolume* internal_default_instance() {
    return reinterpret_cast<const SetVolume*>(
               &_SetVolume_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SetVolume& a, SetVolume& b) {
    a.Swap(&b);
  }
  inline void Swap(SetVolume* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetVolume* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetVolume* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetVolume>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetVolume& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetVolume& from) {
    SetVolume::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetVolume* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Command.SetVolume";
  }
  protected:
  explicit SetVolume(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuePercentFieldNumber = 1,
  };
  // required int32 valuePercent = 1;
  bool has_valuepercent() const;
  private:
  bool _internal_has_valuepercent() const;
  public:
  void clear_valuepercent();
  int32_t valuepercent() const;
  void set_valuepercent(int32_t value);
  private:
  int32_t _internal_valuepercent() const;
  void _internal_set_valuepercent(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Command.SetVolume)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t valuepercent_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_command_2eproto;
};
// -------------------------------------------------------------------

class Seek final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Command.Seek) */ {
 public:
  inline Seek() : Seek(nullptr) {}
  ~Seek() override;
  explicit PROTOBUF_CONSTEXPR Seek(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Seek(const Seek& from);
  Seek(Seek&& from) noexcept
    : Seek() {
    *this = ::std::move(from);
  }

  inline Seek& operator=(const Seek& from) {
    CopyFrom(from);
    return *this;
  }
  inline Seek& operator=(Seek&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Seek& default_instance() {
    return *internal_default_instance();
  }
  static inline const Seek* internal_default_instance() {
    return reinterpret_cast<const Seek*>(
               &_Seek_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Seek& a, Seek& b) {
    a.Swap(&b);
  }
  inline void Swap(Seek* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Seek* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Seek* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Seek>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Seek& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Seek& from) {
    Seek::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Seek* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Command.Seek";
  }
  protected:
  explicit Seek(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // required int32 value = 1;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  int32_t value() const;
  void set_value(int32_t value);
  private:
  int32_t _internal_value() const;
  void _internal_set_value(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Command.Seek)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t value_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_command_2eproto;
};
// -------------------------------------------------------------------

class Track final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Command.Track) */ {
 public:
  inline Track() : Track(nullptr) {}
  ~Track() override;
  explicit PROTOBUF_CONSTEXPR Track(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Track(const Track& from);
  Track(Track&& from) noexcept
    : Track() {
    *this = ::std::move(from);
  }

  inline Track& operator=(const Track& from) {
    CopyFrom(from);
    return *this;
  }
  inline Track& operator=(Track&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Track& default_instance() {
    return *internal_default_instance();
  }
  static inline const Track* internal_default_instance() {
    return reinterpret_cast<const Track*>(
               &_Track_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Track& a, Track& b) {
    a.Swap(&b);
  }
  inline void Swap(Track* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Track* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Track* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Track>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Track& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Track& from) {
    Track::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Track* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Command.Track";
  }
  protected:
  explicit Track(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArtistFieldNumber = 2,
    kTitleFieldNumber = 3,
    kTrackFieldNumber = 1,
    kDurationFieldNumber = 4,
    kActiveFieldNumber = 5,
  };
  // required string Artist = 2;
  bool has_artist() const;
  private:
  bool _internal_has_artist() const;
  public:
  void clear_artist();
  const std::string& artist() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_artist(ArgT0&& arg0, ArgT... args);
  std::string* mutable_artist();
  PROTOBUF_NODISCARD std::string* release_artist();
  void set_allocated_artist(std::string* artist);
  private:
  const std::string& _internal_artist() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_artist(const std::string& value);
  std::string* _internal_mutable_artist();
  public:

  // required string Title = 3;
  bool has_title() const;
  private:
  bool _internal_has_title() const;
  public:
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // required int32 Track = 1;
  bool has_track() const;
  private:
  bool _internal_has_track() const;
  public:
  void clear_track();
  int32_t track() const;
  void set_track(int32_t value);
  private:
  int32_t _internal_track() const;
  void _internal_set_track(int32_t value);
  public:

  // required int32 Duration = 4;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  int32_t duration() const;
  void set_duration(int32_t value);
  private:
  int32_t _internal_duration() const;
  void _internal_set_duration(int32_t value);
  public:

  // required bool Active = 5;
  bool has_active() const;
  private:
  bool _internal_has_active() const;
  public:
  void clear_active();
  bool active() const;
  void set_active(bool value);
  private:
  bool _internal_active() const;
  void _internal_set_active(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Command.Track)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr artist_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    int32_t track_;
    int32_t duration_;
    bool active_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_command_2eproto;
};
// -------------------------------------------------------------------

class Playlist final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Command.Playlist) */ {
 public:
  inline Playlist() : Playlist(nullptr) {}
  ~Playlist() override;
  explicit PROTOBUF_CONSTEXPR Playlist(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Playlist(const Playlist& from);
  Playlist(Playlist&& from) noexcept
    : Playlist() {
    *this = ::std::move(from);
  }

  inline Playlist& operator=(const Playlist& from) {
    CopyFrom(from);
    return *this;
  }
  inline Playlist& operator=(Playlist&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Playlist& default_instance() {
    return *internal_default_instance();
  }
  static inline const Playlist* internal_default_instance() {
    return reinterpret_cast<const Playlist*>(
               &_Playlist_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Playlist& a, Playlist& b) {
    a.Swap(&b);
  }
  inline void Swap(Playlist* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Playlist* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Playlist* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Playlist>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Playlist& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Playlist& from) {
    Playlist::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Playlist* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Command.Playlist";
  }
  protected:
  explicit Playlist(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrackFieldNumber = 1,
  };
  // repeated .Command.Track Track = 1;
  int track_size() const;
  private:
  int _internal_track_size() const;
  public:
  void clear_track();
  ::Command::Track* mutable_track(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Command::Track >*
      mutable_track();
  private:
  const ::Command::Track& _internal_track(int index) const;
  ::Command::Track* _internal_add_track();
  public:
  const ::Command::Track& track(int index) const;
  ::Command::Track* add_track();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Command::Track >&
      track() const;

  // @@protoc_insertion_point(class_scope:Command.Playlist)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Command::Track > track_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_command_2eproto;
};
// -------------------------------------------------------------------

class Status final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Command.Status) */ {
 public:
  inline Status() : Status(nullptr) {}
  ~Status() override;
  explicit PROTOBUF_CONSTEXPR Status(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Status(const Status& from);
  Status(Status&& from) noexcept
    : Status() {
    *this = ::std::move(from);
  }

  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }
  inline Status& operator=(Status&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Status& default_instance() {
    return *internal_default_instance();
  }
  static inline const Status* internal_default_instance() {
    return reinterpret_cast<const Status*>(
               &_Status_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Status& a, Status& b) {
    a.Swap(&b);
  }
  inline void Swap(Status* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Status* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Status* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Status>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Status& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Status& from) {
    Status::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Status* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Command.Status";
  }
  protected:
  explicit Status(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodecFieldNumber = 1,
    kPlaylistFieldNumber = 11,
    kElapsedFieldNumber = 2,
    kPlayStateFieldNumber = 3,
    kHiResFieldNumber = 4,
    kShuffleFieldNumber = 5,
    kRepeatFieldNumber = 6,
    kVolumeFieldNumber = 7,
    kBitRateFieldNumber = 8,
    kSampleRateFieldNumber = 9,
    kBitDepthFieldNumber = 10,
  };
  // required string Codec = 1;
  bool has_codec() const;
  private:
  bool _internal_has_codec() const;
  public:
  void clear_codec();
  const std::string& codec() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_codec(ArgT0&& arg0, ArgT... args);
  std::string* mutable_codec();
  PROTOBUF_NODISCARD std::string* release_codec();
  void set_allocated_codec(std::string* codec);
  private:
  const std::string& _internal_codec() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_codec(const std::string& value);
  std::string* _internal_mutable_codec();
  public:

  // required .Command.Playlist Playlist = 11;
  bool has_playlist() const;
  private:
  bool _internal_has_playlist() const;
  public:
  void clear_playlist();
  const ::Command::Playlist& playlist() const;
  PROTOBUF_NODISCARD ::Command::Playlist* release_playlist();
  ::Command::Playlist* mutable_playlist();
  void set_allocated_playlist(::Command::Playlist* playlist);
  private:
  const ::Command::Playlist& _internal_playlist() const;
  ::Command::Playlist* _internal_mutable_playlist();
  public:
  void unsafe_arena_set_allocated_playlist(
      ::Command::Playlist* playlist);
  ::Command::Playlist* unsafe_arena_release_playlist();

  // required int32 Elapsed = 2;
  bool has_elapsed() const;
  private:
  bool _internal_has_elapsed() const;
  public:
  void clear_elapsed();
  int32_t elapsed() const;
  void set_elapsed(int32_t value);
  private:
  int32_t _internal_elapsed() const;
  void _internal_set_elapsed(int32_t value);
  public:

  // required int32 PlayState = 3;
  bool has_playstate() const;
  private:
  bool _internal_has_playstate() const;
  public:
  void clear_playstate();
  int32_t playstate() const;
  void set_playstate(int32_t value);
  private:
  int32_t _internal_playstate() const;
  void _internal_set_playstate(int32_t value);
  public:

  // required bool HiRes = 4;
  bool has_hires() const;
  private:
  bool _internal_has_hires() const;
  public:
  void clear_hires();
  bool hires() const;
  void set_hires(bool value);
  private:
  bool _internal_hires() const;
  void _internal_set_hires(bool value);
  public:

  // required bool Shuffle = 5;
  bool has_shuffle() const;
  private:
  bool _internal_has_shuffle() const;
  public:
  void clear_shuffle();
  bool shuffle() const;
  void set_shuffle(bool value);
  private:
  bool _internal_shuffle() const;
  void _internal_set_shuffle(bool value);
  public:

  // required int32 Repeat = 6;
  bool has_repeat() const;
  private:
  bool _internal_has_repeat() const;
  public:
  void clear_repeat();
  int32_t repeat() const;
  void set_repeat(int32_t value);
  private:
  int32_t _internal_repeat() const;
  void _internal_set_repeat(int32_t value);
  public:

  // required int32 Volume = 7;
  bool has_volume() const;
  private:
  bool _internal_has_volume() const;
  public:
  void clear_volume();
  int32_t volume() const;
  void set_volume(int32_t value);
  private:
  int32_t _internal_volume() const;
  void _internal_set_volume(int32_t value);
  public:

  // optional int32 BitRate = 8;
  bool has_bitrate() const;
  private:
  bool _internal_has_bitrate() const;
  public:
  void clear_bitrate();
  int32_t bitrate() const;
  void set_bitrate(int32_t value);
  private:
  int32_t _internal_bitrate() const;
  void _internal_set_bitrate(int32_t value);
  public:

  // optional float SampleRate = 9;
  bool has_samplerate() const;
  private:
  bool _internal_has_samplerate() const;
  public:
  void clear_samplerate();
  float samplerate() const;
  void set_samplerate(float value);
  private:
  float _internal_samplerate() const;
  void _internal_set_samplerate(float value);
  public:

  // optional int32 BitDepth = 10;
  bool has_bitdepth() const;
  private:
  bool _internal_has_bitdepth() const;
  public:
  void clear_bitdepth();
  int32_t bitdepth() const;
  void set_bitdepth(int32_t value);
  private:
  int32_t _internal_bitdepth() const;
  void _internal_set_bitdepth(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Command.Status)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr codec_;
    ::Command::Playlist* playlist_;
    int32_t elapsed_;
    int32_t playstate_;
    bool hires_;
    bool shuffle_;
    int32_t repeat_;
    int32_t volume_;
    int32_t bitrate_;
    float samplerate_;
    int32_t bitdepth_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_command_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Command

// required .Command.Type Type = 1;
inline bool Command::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Command::has_type() const {
  return _internal_has_type();
}
inline void Command::clear_type() {
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::Command::Type Command::_internal_type() const {
  return static_cast< ::Command::Type >(_impl_.type_);
}
inline ::Command::Type Command::type() const {
  // @@protoc_insertion_point(field_get:Command.Command.Type)
  return _internal_type();
}
inline void Command::_internal_set_type(::Command::Type value) {
  assert(::Command::Type_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.type_ = value;
}
inline void Command::set_type(::Command::Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Command.Command.Type)
}

// required .Command.ResponseCode Code = 2;
inline bool Command::_internal_has_code() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Command::has_code() const {
  return _internal_has_code();
}
inline void Command::clear_code() {
  _impl_.code_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::Command::ResponseCode Command::_internal_code() const {
  return static_cast< ::Command::ResponseCode >(_impl_.code_);
}
inline ::Command::ResponseCode Command::code() const {
  // @@protoc_insertion_point(field_get:Command.Command.Code)
  return _internal_code();
}
inline void Command::_internal_set_code(::Command::ResponseCode value) {
  assert(::Command::ResponseCode_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.code_ = value;
}
inline void Command::set_code(::Command::ResponseCode value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:Command.Command.Code)
}

// .Command.WindowStatus WindowStatus = 3;
inline bool Command::_internal_has_windowstatus() const {
  return msg_case() == kWindowStatus;
}
inline bool Command::has_windowstatus() const {
  return _internal_has_windowstatus();
}
inline void Command::set_has_windowstatus() {
  _impl_._oneof_case_[0] = kWindowStatus;
}
inline void Command::clear_windowstatus() {
  if (_internal_has_windowstatus()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.msg_.windowstatus_;
    }
    clear_has_msg();
  }
}
inline ::Command::WindowStatus* Command::release_windowstatus() {
  // @@protoc_insertion_point(field_release:Command.Command.WindowStatus)
  if (_internal_has_windowstatus()) {
    clear_has_msg();
    ::Command::WindowStatus* temp = _impl_.msg_.windowstatus_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.msg_.windowstatus_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Command::WindowStatus& Command::_internal_windowstatus() const {
  return _internal_has_windowstatus()
      ? *_impl_.msg_.windowstatus_
      : reinterpret_cast< ::Command::WindowStatus&>(::Command::_WindowStatus_default_instance_);
}
inline const ::Command::WindowStatus& Command::windowstatus() const {
  // @@protoc_insertion_point(field_get:Command.Command.WindowStatus)
  return _internal_windowstatus();
}
inline ::Command::WindowStatus* Command::unsafe_arena_release_windowstatus() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Command.Command.WindowStatus)
  if (_internal_has_windowstatus()) {
    clear_has_msg();
    ::Command::WindowStatus* temp = _impl_.msg_.windowstatus_;
    _impl_.msg_.windowstatus_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_windowstatus(::Command::WindowStatus* windowstatus) {
  clear_msg();
  if (windowstatus) {
    set_has_windowstatus();
    _impl_.msg_.windowstatus_ = windowstatus;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Command.Command.WindowStatus)
}
inline ::Command::WindowStatus* Command::_internal_mutable_windowstatus() {
  if (!_internal_has_windowstatus()) {
    clear_msg();
    set_has_windowstatus();
    _impl_.msg_.windowstatus_ = CreateMaybeMessage< ::Command::WindowStatus >(GetArenaForAllocation());
  }
  return _impl_.msg_.windowstatus_;
}
inline ::Command::WindowStatus* Command::mutable_windowstatus() {
  ::Command::WindowStatus* _msg = _internal_mutable_windowstatus();
  // @@protoc_insertion_point(field_mutable:Command.Command.WindowStatus)
  return _msg;
}

// .Command.Status Status = 4;
inline bool Command::_internal_has_status() const {
  return msg_case() == kStatus;
}
inline bool Command::has_status() const {
  return _internal_has_status();
}
inline void Command::set_has_status() {
  _impl_._oneof_case_[0] = kStatus;
}
inline void Command::clear_status() {
  if (_internal_has_status()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.msg_.status_;
    }
    clear_has_msg();
  }
}
inline ::Command::Status* Command::release_status() {
  // @@protoc_insertion_point(field_release:Command.Command.Status)
  if (_internal_has_status()) {
    clear_has_msg();
    ::Command::Status* temp = _impl_.msg_.status_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.msg_.status_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Command::Status& Command::_internal_status() const {
  return _internal_has_status()
      ? *_impl_.msg_.status_
      : reinterpret_cast< ::Command::Status&>(::Command::_Status_default_instance_);
}
inline const ::Command::Status& Command::status() const {
  // @@protoc_insertion_point(field_get:Command.Command.Status)
  return _internal_status();
}
inline ::Command::Status* Command::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Command.Command.Status)
  if (_internal_has_status()) {
    clear_has_msg();
    ::Command::Status* temp = _impl_.msg_.status_;
    _impl_.msg_.status_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_status(::Command::Status* status) {
  clear_msg();
  if (status) {
    set_has_status();
    _impl_.msg_.status_ = status;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Command.Command.Status)
}
inline ::Command::Status* Command::_internal_mutable_status() {
  if (!_internal_has_status()) {
    clear_msg();
    set_has_status();
    _impl_.msg_.status_ = CreateMaybeMessage< ::Command::Status >(GetArenaForAllocation());
  }
  return _impl_.msg_.status_;
}
inline ::Command::Status* Command::mutable_status() {
  ::Command::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:Command.Command.Status)
  return _msg;
}

// .Command.SetVolume SetVolume = 5;
inline bool Command::_internal_has_setvolume() const {
  return msg_case() == kSetVolume;
}
inline bool Command::has_setvolume() const {
  return _internal_has_setvolume();
}
inline void Command::set_has_setvolume() {
  _impl_._oneof_case_[0] = kSetVolume;
}
inline void Command::clear_setvolume() {
  if (_internal_has_setvolume()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.msg_.setvolume_;
    }
    clear_has_msg();
  }
}
inline ::Command::SetVolume* Command::release_setvolume() {
  // @@protoc_insertion_point(field_release:Command.Command.SetVolume)
  if (_internal_has_setvolume()) {
    clear_has_msg();
    ::Command::SetVolume* temp = _impl_.msg_.setvolume_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.msg_.setvolume_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Command::SetVolume& Command::_internal_setvolume() const {
  return _internal_has_setvolume()
      ? *_impl_.msg_.setvolume_
      : reinterpret_cast< ::Command::SetVolume&>(::Command::_SetVolume_default_instance_);
}
inline const ::Command::SetVolume& Command::setvolume() const {
  // @@protoc_insertion_point(field_get:Command.Command.SetVolume)
  return _internal_setvolume();
}
inline ::Command::SetVolume* Command::unsafe_arena_release_setvolume() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Command.Command.SetVolume)
  if (_internal_has_setvolume()) {
    clear_has_msg();
    ::Command::SetVolume* temp = _impl_.msg_.setvolume_;
    _impl_.msg_.setvolume_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_setvolume(::Command::SetVolume* setvolume) {
  clear_msg();
  if (setvolume) {
    set_has_setvolume();
    _impl_.msg_.setvolume_ = setvolume;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Command.Command.SetVolume)
}
inline ::Command::SetVolume* Command::_internal_mutable_setvolume() {
  if (!_internal_has_setvolume()) {
    clear_msg();
    set_has_setvolume();
    _impl_.msg_.setvolume_ = CreateMaybeMessage< ::Command::SetVolume >(GetArenaForAllocation());
  }
  return _impl_.msg_.setvolume_;
}
inline ::Command::SetVolume* Command::mutable_setvolume() {
  ::Command::SetVolume* _msg = _internal_mutable_setvolume();
  // @@protoc_insertion_point(field_mutable:Command.Command.SetVolume)
  return _msg;
}

// .Command.Seek Seek = 6;
inline bool Command::_internal_has_seek() const {
  return msg_case() == kSeek;
}
inline bool Command::has_seek() const {
  return _internal_has_seek();
}
inline void Command::set_has_seek() {
  _impl_._oneof_case_[0] = kSeek;
}
inline void Command::clear_seek() {
  if (_internal_has_seek()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.msg_.seek_;
    }
    clear_has_msg();
  }
}
inline ::Command::Seek* Command::release_seek() {
  // @@protoc_insertion_point(field_release:Command.Command.Seek)
  if (_internal_has_seek()) {
    clear_has_msg();
    ::Command::Seek* temp = _impl_.msg_.seek_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.msg_.seek_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Command::Seek& Command::_internal_seek() const {
  return _internal_has_seek()
      ? *_impl_.msg_.seek_
      : reinterpret_cast< ::Command::Seek&>(::Command::_Seek_default_instance_);
}
inline const ::Command::Seek& Command::seek() const {
  // @@protoc_insertion_point(field_get:Command.Command.Seek)
  return _internal_seek();
}
inline ::Command::Seek* Command::unsafe_arena_release_seek() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Command.Command.Seek)
  if (_internal_has_seek()) {
    clear_has_msg();
    ::Command::Seek* temp = _impl_.msg_.seek_;
    _impl_.msg_.seek_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_seek(::Command::Seek* seek) {
  clear_msg();
  if (seek) {
    set_has_seek();
    _impl_.msg_.seek_ = seek;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Command.Command.Seek)
}
inline ::Command::Seek* Command::_internal_mutable_seek() {
  if (!_internal_has_seek()) {
    clear_msg();
    set_has_seek();
    _impl_.msg_.seek_ = CreateMaybeMessage< ::Command::Seek >(GetArenaForAllocation());
  }
  return _impl_.msg_.seek_;
}
inline ::Command::Seek* Command::mutable_seek() {
  ::Command::Seek* _msg = _internal_mutable_seek();
  // @@protoc_insertion_point(field_mutable:Command.Command.Seek)
  return _msg;
}

// .Command.FeatureBigCover FeatureBigCover = 7;
inline bool Command::_internal_has_featurebigcover() const {
  return msg_case() == kFeatureBigCover;
}
inline bool Command::has_featurebigcover() const {
  return _internal_has_featurebigcover();
}
inline void Command::set_has_featurebigcover() {
  _impl_._oneof_case_[0] = kFeatureBigCover;
}
inline void Command::clear_featurebigcover() {
  if (_internal_has_featurebigcover()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.msg_.featurebigcover_;
    }
    clear_has_msg();
  }
}
inline ::Command::FeatureBigCover* Command::release_featurebigcover() {
  // @@protoc_insertion_point(field_release:Command.Command.FeatureBigCover)
  if (_internal_has_featurebigcover()) {
    clear_has_msg();
    ::Command::FeatureBigCover* temp = _impl_.msg_.featurebigcover_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.msg_.featurebigcover_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Command::FeatureBigCover& Command::_internal_featurebigcover() const {
  return _internal_has_featurebigcover()
      ? *_impl_.msg_.featurebigcover_
      : reinterpret_cast< ::Command::FeatureBigCover&>(::Command::_FeatureBigCover_default_instance_);
}
inline const ::Command::FeatureBigCover& Command::featurebigcover() const {
  // @@protoc_insertion_point(field_get:Command.Command.FeatureBigCover)
  return _internal_featurebigcover();
}
inline ::Command::FeatureBigCover* Command::unsafe_arena_release_featurebigcover() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Command.Command.FeatureBigCover)
  if (_internal_has_featurebigcover()) {
    clear_has_msg();
    ::Command::FeatureBigCover* temp = _impl_.msg_.featurebigcover_;
    _impl_.msg_.featurebigcover_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_featurebigcover(::Command::FeatureBigCover* featurebigcover) {
  clear_msg();
  if (featurebigcover) {
    set_has_featurebigcover();
    _impl_.msg_.featurebigcover_ = featurebigcover;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Command.Command.FeatureBigCover)
}
inline ::Command::FeatureBigCover* Command::_internal_mutable_featurebigcover() {
  if (!_internal_has_featurebigcover()) {
    clear_msg();
    set_has_featurebigcover();
    _impl_.msg_.featurebigcover_ = CreateMaybeMessage< ::Command::FeatureBigCover >(GetArenaForAllocation());
  }
  return _impl_.msg_.featurebigcover_;
}
inline ::Command::FeatureBigCover* Command::mutable_featurebigcover() {
  ::Command::FeatureBigCover* _msg = _internal_mutable_featurebigcover();
  // @@protoc_insertion_point(field_mutable:Command.Command.FeatureBigCover)
  return _msg;
}

// .Command.FeatureShowClock FeatureShowClock = 8;
inline bool Command::_internal_has_featureshowclock() const {
  return msg_case() == kFeatureShowClock;
}
inline bool Command::has_featureshowclock() const {
  return _internal_has_featureshowclock();
}
inline void Command::set_has_featureshowclock() {
  _impl_._oneof_case_[0] = kFeatureShowClock;
}
inline void Command::clear_featureshowclock() {
  if (_internal_has_featureshowclock()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.msg_.featureshowclock_;
    }
    clear_has_msg();
  }
}
inline ::Command::FeatureShowClock* Command::release_featureshowclock() {
  // @@protoc_insertion_point(field_release:Command.Command.FeatureShowClock)
  if (_internal_has_featureshowclock()) {
    clear_has_msg();
    ::Command::FeatureShowClock* temp = _impl_.msg_.featureshowclock_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.msg_.featureshowclock_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Command::FeatureShowClock& Command::_internal_featureshowclock() const {
  return _internal_has_featureshowclock()
      ? *_impl_.msg_.featureshowclock_
      : reinterpret_cast< ::Command::FeatureShowClock&>(::Command::_FeatureShowClock_default_instance_);
}
inline const ::Command::FeatureShowClock& Command::featureshowclock() const {
  // @@protoc_insertion_point(field_get:Command.Command.FeatureShowClock)
  return _internal_featureshowclock();
}
inline ::Command::FeatureShowClock* Command::unsafe_arena_release_featureshowclock() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Command.Command.FeatureShowClock)
  if (_internal_has_featureshowclock()) {
    clear_has_msg();
    ::Command::FeatureShowClock* temp = _impl_.msg_.featureshowclock_;
    _impl_.msg_.featureshowclock_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_featureshowclock(::Command::FeatureShowClock* featureshowclock) {
  clear_msg();
  if (featureshowclock) {
    set_has_featureshowclock();
    _impl_.msg_.featureshowclock_ = featureshowclock;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Command.Command.FeatureShowClock)
}
inline ::Command::FeatureShowClock* Command::_internal_mutable_featureshowclock() {
  if (!_internal_has_featureshowclock()) {
    clear_msg();
    set_has_featureshowclock();
    _impl_.msg_.featureshowclock_ = CreateMaybeMessage< ::Command::FeatureShowClock >(GetArenaForAllocation());
  }
  return _impl_.msg_.featureshowclock_;
}
inline ::Command::FeatureShowClock* Command::mutable_featureshowclock() {
  ::Command::FeatureShowClock* _msg = _internal_mutable_featureshowclock();
  // @@protoc_insertion_point(field_mutable:Command.Command.FeatureShowClock)
  return _msg;
}

inline bool Command::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
inline void Command::clear_has_msg() {
  _impl_._oneof_case_[0] = MSG_NOT_SET;
}
inline Command::MsgCase Command::msg_case() const {
  return Command::MsgCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// FeatureBigCover

// required bool enabled = 1;
inline bool FeatureBigCover::_internal_has_enabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FeatureBigCover::has_enabled() const {
  return _internal_has_enabled();
}
inline void FeatureBigCover::clear_enabled() {
  _impl_.enabled_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool FeatureBigCover::_internal_enabled() const {
  return _impl_.enabled_;
}
inline bool FeatureBigCover::enabled() const {
  // @@protoc_insertion_point(field_get:Command.FeatureBigCover.enabled)
  return _internal_enabled();
}
inline void FeatureBigCover::_internal_set_enabled(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.enabled_ = value;
}
inline void FeatureBigCover::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:Command.FeatureBigCover.enabled)
}

// -------------------------------------------------------------------

// FeatureShowClock

// required bool enabled = 1;
inline bool FeatureShowClock::_internal_has_enabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FeatureShowClock::has_enabled() const {
  return _internal_has_enabled();
}
inline void FeatureShowClock::clear_enabled() {
  _impl_.enabled_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool FeatureShowClock::_internal_enabled() const {
  return _impl_.enabled_;
}
inline bool FeatureShowClock::enabled() const {
  // @@protoc_insertion_point(field_get:Command.FeatureShowClock.enabled)
  return _internal_enabled();
}
inline void FeatureShowClock::_internal_set_enabled(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.enabled_ = value;
}
inline void FeatureShowClock::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:Command.FeatureShowClock.enabled)
}

// -------------------------------------------------------------------

// WindowStatus

// required .Command.WindowVisible Visible = 1;
inline bool WindowStatus::_internal_has_visible() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool WindowStatus::has_visible() const {
  return _internal_has_visible();
}
inline void WindowStatus::clear_visible() {
  _impl_.visible_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::Command::WindowVisible WindowStatus::_internal_visible() const {
  return static_cast< ::Command::WindowVisible >(_impl_.visible_);
}
inline ::Command::WindowVisible WindowStatus::visible() const {
  // @@protoc_insertion_point(field_get:Command.WindowStatus.Visible)
  return _internal_visible();
}
inline void WindowStatus::_internal_set_visible(::Command::WindowVisible value) {
  assert(::Command::WindowVisible_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.visible_ = value;
}
inline void WindowStatus::set_visible(::Command::WindowVisible value) {
  _internal_set_visible(value);
  // @@protoc_insertion_point(field_set:Command.WindowStatus.Visible)
}

// -------------------------------------------------------------------

// SetVolume

// required int32 valuePercent = 1;
inline bool SetVolume::_internal_has_valuepercent() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SetVolume::has_valuepercent() const {
  return _internal_has_valuepercent();
}
inline void SetVolume::clear_valuepercent() {
  _impl_.valuepercent_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t SetVolume::_internal_valuepercent() const {
  return _impl_.valuepercent_;
}
inline int32_t SetVolume::valuepercent() const {
  // @@protoc_insertion_point(field_get:Command.SetVolume.valuePercent)
  return _internal_valuepercent();
}
inline void SetVolume::_internal_set_valuepercent(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.valuepercent_ = value;
}
inline void SetVolume::set_valuepercent(int32_t value) {
  _internal_set_valuepercent(value);
  // @@protoc_insertion_point(field_set:Command.SetVolume.valuePercent)
}

// -------------------------------------------------------------------

// Seek

// required int32 value = 1;
inline bool Seek::_internal_has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Seek::has_value() const {
  return _internal_has_value();
}
inline void Seek::clear_value() {
  _impl_.value_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t Seek::_internal_value() const {
  return _impl_.value_;
}
inline int32_t Seek::value() const {
  // @@protoc_insertion_point(field_get:Command.Seek.value)
  return _internal_value();
}
inline void Seek::_internal_set_value(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.value_ = value;
}
inline void Seek::set_value(int32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:Command.Seek.value)
}

// -------------------------------------------------------------------

// Track

// required int32 Track = 1;
inline bool Track::_internal_has_track() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Track::has_track() const {
  return _internal_has_track();
}
inline void Track::clear_track() {
  _impl_.track_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t Track::_internal_track() const {
  return _impl_.track_;
}
inline int32_t Track::track() const {
  // @@protoc_insertion_point(field_get:Command.Track.Track)
  return _internal_track();
}
inline void Track::_internal_set_track(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.track_ = value;
}
inline void Track::set_track(int32_t value) {
  _internal_set_track(value);
  // @@protoc_insertion_point(field_set:Command.Track.Track)
}

// required string Artist = 2;
inline bool Track::_internal_has_artist() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Track::has_artist() const {
  return _internal_has_artist();
}
inline void Track::clear_artist() {
  _impl_.artist_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Track::artist() const {
  // @@protoc_insertion_point(field_get:Command.Track.Artist)
  return _internal_artist();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Track::set_artist(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.artist_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Command.Track.Artist)
}
inline std::string* Track::mutable_artist() {
  std::string* _s = _internal_mutable_artist();
  // @@protoc_insertion_point(field_mutable:Command.Track.Artist)
  return _s;
}
inline const std::string& Track::_internal_artist() const {
  return _impl_.artist_.Get();
}
inline void Track::_internal_set_artist(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.artist_.Set(value, GetArenaForAllocation());
}
inline std::string* Track::_internal_mutable_artist() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.artist_.Mutable(GetArenaForAllocation());
}
inline std::string* Track::release_artist() {
  // @@protoc_insertion_point(field_release:Command.Track.Artist)
  if (!_internal_has_artist()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.artist_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.artist_.IsDefault()) {
    _impl_.artist_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Track::set_allocated_artist(std::string* artist) {
  if (artist != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.artist_.SetAllocated(artist, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.artist_.IsDefault()) {
    _impl_.artist_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Command.Track.Artist)
}

// required string Title = 3;
inline bool Track::_internal_has_title() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Track::has_title() const {
  return _internal_has_title();
}
inline void Track::clear_title() {
  _impl_.title_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Track::title() const {
  // @@protoc_insertion_point(field_get:Command.Track.Title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Track::set_title(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Command.Track.Title)
}
inline std::string* Track::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:Command.Track.Title)
  return _s;
}
inline const std::string& Track::_internal_title() const {
  return _impl_.title_.Get();
}
inline void Track::_internal_set_title(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* Track::_internal_mutable_title() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.title_.Mutable(GetArenaForAllocation());
}
inline std::string* Track::release_title() {
  // @@protoc_insertion_point(field_release:Command.Track.Title)
  if (!_internal_has_title()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.title_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Track::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Command.Track.Title)
}

// required int32 Duration = 4;
inline bool Track::_internal_has_duration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Track::has_duration() const {
  return _internal_has_duration();
}
inline void Track::clear_duration() {
  _impl_.duration_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t Track::_internal_duration() const {
  return _impl_.duration_;
}
inline int32_t Track::duration() const {
  // @@protoc_insertion_point(field_get:Command.Track.Duration)
  return _internal_duration();
}
inline void Track::_internal_set_duration(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.duration_ = value;
}
inline void Track::set_duration(int32_t value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:Command.Track.Duration)
}

// required bool Active = 5;
inline bool Track::_internal_has_active() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Track::has_active() const {
  return _internal_has_active();
}
inline void Track::clear_active() {
  _impl_.active_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool Track::_internal_active() const {
  return _impl_.active_;
}
inline bool Track::active() const {
  // @@protoc_insertion_point(field_get:Command.Track.Active)
  return _internal_active();
}
inline void Track::_internal_set_active(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.active_ = value;
}
inline void Track::set_active(bool value) {
  _internal_set_active(value);
  // @@protoc_insertion_point(field_set:Command.Track.Active)
}

// -------------------------------------------------------------------

// Playlist

// repeated .Command.Track Track = 1;
inline int Playlist::_internal_track_size() const {
  return _impl_.track_.size();
}
inline int Playlist::track_size() const {
  return _internal_track_size();
}
inline void Playlist::clear_track() {
  _impl_.track_.Clear();
}
inline ::Command::Track* Playlist::mutable_track(int index) {
  // @@protoc_insertion_point(field_mutable:Command.Playlist.Track)
  return _impl_.track_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Command::Track >*
Playlist::mutable_track() {
  // @@protoc_insertion_point(field_mutable_list:Command.Playlist.Track)
  return &_impl_.track_;
}
inline const ::Command::Track& Playlist::_internal_track(int index) const {
  return _impl_.track_.Get(index);
}
inline const ::Command::Track& Playlist::track(int index) const {
  // @@protoc_insertion_point(field_get:Command.Playlist.Track)
  return _internal_track(index);
}
inline ::Command::Track* Playlist::_internal_add_track() {
  return _impl_.track_.Add();
}
inline ::Command::Track* Playlist::add_track() {
  ::Command::Track* _add = _internal_add_track();
  // @@protoc_insertion_point(field_add:Command.Playlist.Track)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Command::Track >&
Playlist::track() const {
  // @@protoc_insertion_point(field_list:Command.Playlist.Track)
  return _impl_.track_;
}

// -------------------------------------------------------------------

// Status

// required string Codec = 1;
inline bool Status::_internal_has_codec() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Status::has_codec() const {
  return _internal_has_codec();
}
inline void Status::clear_codec() {
  _impl_.codec_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Status::codec() const {
  // @@protoc_insertion_point(field_get:Command.Status.Codec)
  return _internal_codec();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Status::set_codec(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.codec_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Command.Status.Codec)
}
inline std::string* Status::mutable_codec() {
  std::string* _s = _internal_mutable_codec();
  // @@protoc_insertion_point(field_mutable:Command.Status.Codec)
  return _s;
}
inline const std::string& Status::_internal_codec() const {
  return _impl_.codec_.Get();
}
inline void Status::_internal_set_codec(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.codec_.Set(value, GetArenaForAllocation());
}
inline std::string* Status::_internal_mutable_codec() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.codec_.Mutable(GetArenaForAllocation());
}
inline std::string* Status::release_codec() {
  // @@protoc_insertion_point(field_release:Command.Status.Codec)
  if (!_internal_has_codec()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.codec_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.codec_.IsDefault()) {
    _impl_.codec_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Status::set_allocated_codec(std::string* codec) {
  if (codec != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.codec_.SetAllocated(codec, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.codec_.IsDefault()) {
    _impl_.codec_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Command.Status.Codec)
}

// required int32 Elapsed = 2;
inline bool Status::_internal_has_elapsed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Status::has_elapsed() const {
  return _internal_has_elapsed();
}
inline void Status::clear_elapsed() {
  _impl_.elapsed_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t Status::_internal_elapsed() const {
  return _impl_.elapsed_;
}
inline int32_t Status::elapsed() const {
  // @@protoc_insertion_point(field_get:Command.Status.Elapsed)
  return _internal_elapsed();
}
inline void Status::_internal_set_elapsed(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.elapsed_ = value;
}
inline void Status::set_elapsed(int32_t value) {
  _internal_set_elapsed(value);
  // @@protoc_insertion_point(field_set:Command.Status.Elapsed)
}

// required int32 PlayState = 3;
inline bool Status::_internal_has_playstate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Status::has_playstate() const {
  return _internal_has_playstate();
}
inline void Status::clear_playstate() {
  _impl_.playstate_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t Status::_internal_playstate() const {
  return _impl_.playstate_;
}
inline int32_t Status::playstate() const {
  // @@protoc_insertion_point(field_get:Command.Status.PlayState)
  return _internal_playstate();
}
inline void Status::_internal_set_playstate(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.playstate_ = value;
}
inline void Status::set_playstate(int32_t value) {
  _internal_set_playstate(value);
  // @@protoc_insertion_point(field_set:Command.Status.PlayState)
}

// required bool HiRes = 4;
inline bool Status::_internal_has_hires() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Status::has_hires() const {
  return _internal_has_hires();
}
inline void Status::clear_hires() {
  _impl_.hires_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool Status::_internal_hires() const {
  return _impl_.hires_;
}
inline bool Status::hires() const {
  // @@protoc_insertion_point(field_get:Command.Status.HiRes)
  return _internal_hires();
}
inline void Status::_internal_set_hires(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.hires_ = value;
}
inline void Status::set_hires(bool value) {
  _internal_set_hires(value);
  // @@protoc_insertion_point(field_set:Command.Status.HiRes)
}

// required bool Shuffle = 5;
inline bool Status::_internal_has_shuffle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Status::has_shuffle() const {
  return _internal_has_shuffle();
}
inline void Status::clear_shuffle() {
  _impl_.shuffle_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool Status::_internal_shuffle() const {
  return _impl_.shuffle_;
}
inline bool Status::shuffle() const {
  // @@protoc_insertion_point(field_get:Command.Status.Shuffle)
  return _internal_shuffle();
}
inline void Status::_internal_set_shuffle(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.shuffle_ = value;
}
inline void Status::set_shuffle(bool value) {
  _internal_set_shuffle(value);
  // @@protoc_insertion_point(field_set:Command.Status.Shuffle)
}

// required int32 Repeat = 6;
inline bool Status::_internal_has_repeat() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Status::has_repeat() const {
  return _internal_has_repeat();
}
inline void Status::clear_repeat() {
  _impl_.repeat_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline int32_t Status::_internal_repeat() const {
  return _impl_.repeat_;
}
inline int32_t Status::repeat() const {
  // @@protoc_insertion_point(field_get:Command.Status.Repeat)
  return _internal_repeat();
}
inline void Status::_internal_set_repeat(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.repeat_ = value;
}
inline void Status::set_repeat(int32_t value) {
  _internal_set_repeat(value);
  // @@protoc_insertion_point(field_set:Command.Status.Repeat)
}

// required int32 Volume = 7;
inline bool Status::_internal_has_volume() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Status::has_volume() const {
  return _internal_has_volume();
}
inline void Status::clear_volume() {
  _impl_.volume_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline int32_t Status::_internal_volume() const {
  return _impl_.volume_;
}
inline int32_t Status::volume() const {
  // @@protoc_insertion_point(field_get:Command.Status.Volume)
  return _internal_volume();
}
inline void Status::_internal_set_volume(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.volume_ = value;
}
inline void Status::set_volume(int32_t value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:Command.Status.Volume)
}

// optional int32 BitRate = 8;
inline bool Status::_internal_has_bitrate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Status::has_bitrate() const {
  return _internal_has_bitrate();
}
inline void Status::clear_bitrate() {
  _impl_.bitrate_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline int32_t Status::_internal_bitrate() const {
  return _impl_.bitrate_;
}
inline int32_t Status::bitrate() const {
  // @@protoc_insertion_point(field_get:Command.Status.BitRate)
  return _internal_bitrate();
}
inline void Status::_internal_set_bitrate(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.bitrate_ = value;
}
inline void Status::set_bitrate(int32_t value) {
  _internal_set_bitrate(value);
  // @@protoc_insertion_point(field_set:Command.Status.BitRate)
}

// optional float SampleRate = 9;
inline bool Status::_internal_has_samplerate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Status::has_samplerate() const {
  return _internal_has_samplerate();
}
inline void Status::clear_samplerate() {
  _impl_.samplerate_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline float Status::_internal_samplerate() const {
  return _impl_.samplerate_;
}
inline float Status::samplerate() const {
  // @@protoc_insertion_point(field_get:Command.Status.SampleRate)
  return _internal_samplerate();
}
inline void Status::_internal_set_samplerate(float value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.samplerate_ = value;
}
inline void Status::set_samplerate(float value) {
  _internal_set_samplerate(value);
  // @@protoc_insertion_point(field_set:Command.Status.SampleRate)
}

// optional int32 BitDepth = 10;
inline bool Status::_internal_has_bitdepth() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Status::has_bitdepth() const {
  return _internal_has_bitdepth();
}
inline void Status::clear_bitdepth() {
  _impl_.bitdepth_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline int32_t Status::_internal_bitdepth() const {
  return _impl_.bitdepth_;
}
inline int32_t Status::bitdepth() const {
  // @@protoc_insertion_point(field_get:Command.Status.BitDepth)
  return _internal_bitdepth();
}
inline void Status::_internal_set_bitdepth(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.bitdepth_ = value;
}
inline void Status::set_bitdepth(int32_t value) {
  _internal_set_bitdepth(value);
  // @@protoc_insertion_point(field_set:Command.Status.BitDepth)
}

// required .Command.Playlist Playlist = 11;
inline bool Status::_internal_has_playlist() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.playlist_ != nullptr);
  return value;
}
inline bool Status::has_playlist() const {
  return _internal_has_playlist();
}
inline void Status::clear_playlist() {
  if (_impl_.playlist_ != nullptr) _impl_.playlist_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::Command::Playlist& Status::_internal_playlist() const {
  const ::Command::Playlist* p = _impl_.playlist_;
  return p != nullptr ? *p : reinterpret_cast<const ::Command::Playlist&>(
      ::Command::_Playlist_default_instance_);
}
inline const ::Command::Playlist& Status::playlist() const {
  // @@protoc_insertion_point(field_get:Command.Status.Playlist)
  return _internal_playlist();
}
inline void Status::unsafe_arena_set_allocated_playlist(
    ::Command::Playlist* playlist) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playlist_);
  }
  _impl_.playlist_ = playlist;
  if (playlist) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Command.Status.Playlist)
}
inline ::Command::Playlist* Status::release_playlist() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Command::Playlist* temp = _impl_.playlist_;
  _impl_.playlist_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Command::Playlist* Status::unsafe_arena_release_playlist() {
  // @@protoc_insertion_point(field_release:Command.Status.Playlist)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Command::Playlist* temp = _impl_.playlist_;
  _impl_.playlist_ = nullptr;
  return temp;
}
inline ::Command::Playlist* Status::_internal_mutable_playlist() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.playlist_ == nullptr) {
    auto* p = CreateMaybeMessage<::Command::Playlist>(GetArenaForAllocation());
    _impl_.playlist_ = p;
  }
  return _impl_.playlist_;
}
inline ::Command::Playlist* Status::mutable_playlist() {
  ::Command::Playlist* _msg = _internal_mutable_playlist();
  // @@protoc_insertion_point(field_mutable:Command.Status.Playlist)
  return _msg;
}
inline void Status::set_allocated_playlist(::Command::Playlist* playlist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.playlist_;
  }
  if (playlist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(playlist);
    if (message_arena != submessage_arena) {
      playlist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, playlist, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.playlist_ = playlist;
  // @@protoc_insertion_point(field_set_allocated:Command.Status.Playlist)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Command

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Command::Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Command::Type>() {
  return ::Command::Type_descriptor();
}
template <> struct is_proto_enum< ::Command::ResponseCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Command::ResponseCode>() {
  return ::Command::ResponseCode_descriptor();
}
template <> struct is_proto_enum< ::Command::WindowVisible> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Command::WindowVisible>() {
  return ::Command::WindowVisible_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_command_2eproto
