#include <QFile>
#include <QQmlContext>
#include <QQuickItem>
#include <QWindow>

#include "Provider.moc"
#include "QTimer"
#include "command.pb.h"

#define DETAILS_POPUP_MENU_ID 3
#define DETAILS_POPUP_MENU_ID_WALKMAN_ONE 4
#define CLOCK_UPDATE_INTERVAL_SECONDS 10
#define HAGOROMO_DEFAULT_VOLUME_MAX 120
#define HAGOROMO_AVLS_VOLUME_MAX 63

// Controller is in charge of:
//  - preparing the device to be ready to serve data
//  - performing actions such as changing tracks or play state
// Preparing includes:
// - finding necessary QObjects
// - navigating to music player screen
// - spawning details popup
// - connecting QObjects to Provider
class Controller : public QObject {
    Q_OBJECT

  private:
    void getVolumeInHeader();

    void findViewModels(QQuickItem *swipeItem);

    void initBasicPlayerControls();

    void initNavBar();

    void jsFromFile();

    bool goToPlayer();

    void getModel();

    void restoreTitle();

    QObject *getActivePlayer();

    QVariant jsExpression(const char *text);

    void getFromModelManager();
    void connectFromModelManager();
    void getMusicWindow();
    void getAudioSourceMgr();
    void connectVolumeSlot();
    int toggleClearAudio();
    int toggleDirectSource();
    int toggleVpt(bool enable);
    int setVptPreset(int);
    int setEqBands(QList<double> &bandValues);
    int setEqPreset(int);
    int toggleDsee(bool enable);
    int toggleDCPhase(bool enable);
    int setDCPhasePreset(int);
    int toggleVinyl(bool enable);
    int setToneControlLow(int);
    int setToneControlMiddle(int);
    int setToneControlHigh(int);
    int setToneControlOrEQ(int);
    int setDseeCust(bool enable);
    int setDseeCustMode(int);
    int setVinylMode(int);
    void initializeVolumeValue();

    QWindow *window = nullptr;
    QQmlContext *context = nullptr;
    QObject *FrameWork = nullptr;
    QObject *DAC = nullptr;
    QObject *MSCViewModel = nullptr;           // dmpapp::MSCViewModel
    QObject *MusicPlayer = nullptr;            // MusicPlayerDefault_QMLTYPE_
    QObject *MusicWindow = nullptr;            // PlayerWindow_QMLTYPE_
    QObject *BasicPlayerControls = nullptr;    // dmpapp::BasicPlayerControls
    QObject *NavBar = nullptr;                 // dmpapp::NavigationBarForSettings
    QObject *DACViewModel = nullptr;           // dmpapp::DACViewModel
    QObject *MusicPlayerModel = nullptr;       // dmpapp::MusicPlayerDefaultViewModel
    QObject *SettingTopViewModel = nullptr;    // dmpapp::SettingTopViewModel
    QObject *EqualizerViewModel = nullptr;     // dmpapp::EqualizerViewModel
    QObject *VptViewModel = nullptr;           // dmpapp::VptViewModel
    QObject *DseeAiViewModel = nullptr;        // dmpapp::DseeAiViewModel, no mode change, nw-a50
    QObject *DcPhaseLinearizerModel = nullptr; // dmpapp::DcPhaseLinearizerViewModel
    QObject *VinylProcessorModel = nullptr;    // dmpapp::VinylProcessorViewModel
    QObject *AudioSourceMgr = nullptr;         // dmpapp::AudioSourceMgr
    QObject *ToneControlViewModel = nullptr;   // dmpapp::ToneControlViewModel
    QObject *DseeHxViewModel = nullptr;        // dmpapp::DseeHxViewModel, this one allows changing mode, wm1a/z+?
    QTimer *bpcTimer = nullptr;

    QObject *MusicPlayerDigitalLevelMeterModel = nullptr; // dmpapp::MusicPlayerDigitalLevelMeterViewModel
    QObject *MusicPlayerLevelMeterModel = nullptr;        // dmpapp::MusicPlayerLevelMeterViewModel
    QObject *MusicPlayerSpectrumModel = nullptr;          // dmpapp::MusicPlayerSpectrumViewModel

    QMetaObject::Connection transitionToDetailsPopup{};      // screen transition happened (want only player screen)
    QMetaObject::Connection popupParentChildrenChanged{};    // popup added/removed
    QMetaObject::Connection detailInfoPopupPositionReset{};  // new data is loaded into details popup
    QMetaObject::Connection seekAfterPause{};                // used to "stop" song. "Stop" means pause + seek to 0 in winamp terms
    QMetaObject::Connection updateTitleWithArtistBigCover{}; // track changed -> add artist to title. Big Cover only.
    QList<QMetaObject::Connection> popupReadyConnections{};  // list of popup "ready" signal connections
    QMetaObject::Connection timeInHeader{};                  // updates time in header on timer

    QQuickItem *volumeValueInHeader = nullptr;
    QTimer *timer = nullptr;
    QString regularTitle{}; // title without artist, used to restore title on disabling huge cover

    // DAC is unaware of volume value until it's changed
    bool volumeFirstPull = false;

    bool initialized = false;

    bool featureShowClockEnabled = false;
    bool featureBigCoverEnabled = false;
    bool isWalkmanOne = false;

    int maxVolume = HAGOROMO_DEFAULT_VOLUME_MAX;

  public:
    Provider provider;

    Controller();

    int Initialize();

    bool Ready() const;

    void Hide(Command::Command *c);

    void Show(Command::Command *c);

    void GetWindowStatus(Command::Command *s);

    void SetVolume(Command::Command *c);

    // seconds * 1000
    void Seek(Command::Command *c);

    void Repeat(Command::Command *c);

    void Shuffle(Command::Command *c);

    void Prev(Command::Command *c);

    void Next(Command::Command *c);

    void Play(Command::Command *c);

    void Pause(Command::Command *c);

    void Stop(Command::Command *c);

    void TestCommand(Command::Command *c);

    void FeatureBigCover(Command::Command *c);

    void FeatureShowClock(Command::Command *c);

    void FeatureSetMaxVolume(Command::Command *c);

    void SetClearAudio(Command::Command *c);

    void SetEqBands(Command::Command *c);

    void SetEqPreset(Command::Command *c);

    void SetVPT(Command::Command *c);

    void SetVPTPreset(Command::Command *c);

    void SetDsee(Command::Command *c);

    void SetDCPhase(Command::Command *c);

    void SetDCPhasePreset(Command::Command *c);

    void SetVinyl(Command::Command *c);

    void SetDirectSource(Command::Command *c);

    void SetToneControlValues(Command::Command *c);

    void SetToneControlOrEq(Command::Command *c);

    void SetDseeCust(Command::Command *c);

    void SetDseeCustMode(Command::Command *c);

    void SetVinylMode(Command::Command *c);

  public slots:
    void SeekToZero();

    void UpdateTitleWithArtist();

    void UpdateTime(bool with_time = true);

    void WaitForAudioSource();

    void StopRunning();
};