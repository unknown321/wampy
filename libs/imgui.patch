diff --git a/backends/imgui_impl_glfw.cpp b/backends/imgui_impl_glfw.cpp
index 3c95f178..abcecb33 100644
--- a/backends/imgui_impl_glfw.cpp
+++ b/backends/imgui_impl_glfw.cpp
@@ -295,6 +295,13 @@ static ImGuiKey ImGui_ImplGlfw_KeyToImGuiKey(int key)
         case GLFW_KEY_F22: return ImGuiKey_F22;
         case GLFW_KEY_F23: return ImGuiKey_F23;
         case GLFW_KEY_F24: return ImGuiKey_F24;
+        case GLFW_KEY_VOLUMEDOWN: return ImGuiKey_VolumeDown;
+        case GLFW_KEY_VOLUMEUP: return ImGuiKey_VolumeUp;
+        case GLFW_KEY_HOLD: return ImGuiKey_Hold;
+        case GLFW_KEY_NEXT: return ImGuiKey_Next;
+        case GLFW_KEY_PREV: return ImGuiKey_Prev;
+        case GLFW_KEY_PLAY: return ImGuiKey_Play;
+        case GLFW_KEY_POWER: return ImGuiKey_Power;
         default: return ImGuiKey_None;
     }
 }
diff --git a/backends/imgui_impl_opengl3.cpp b/backends/imgui_impl_opengl3.cpp
index bbe96c42..1f939b22 100644
--- a/backends/imgui_impl_opengl3.cpp
+++ b/backends/imgui_impl_opengl3.cpp
@@ -602,8 +602,29 @@ void    ImGui_ImplOpenGL3_RenderDrawData(ImDrawData* draw_data)
                 if (clip_max.x <= clip_min.x || clip_max.y <= clip_min.y)
                     continue;
 
-                // Apply scissor/clipping rectangle (Y is inverted in OpenGL)
+#ifndef DESKTOP
+                auto sinr = -1;
+                auto cosr = 0;
+                auto x1 = (int) clip_min.x;
+                auto y1 = (int) ((float) 480 - clip_max.y );
+                auto width = (int) (clip_max.x - clip_min.x);
+                auto height = (int) (clip_max.y - clip_min.y);
+//                printf("want to cull %f %f %d %d\n", clip_min.x, fb_height - clip_max.y, width, height);
+                auto originX = 0;
+                auto originY = 0;
+
+                auto newX1 = ((x1 - originX) * cosr - (y1 - originY) * sinr) + originX;
+//    auto newX2 = ((width - originX) * cosr - (height - originY) * sinr) + originX;
+                auto newY1 = ((x1 - originX) * sinr + (-y1 - originY) * cosr) + originY;
+//    auto newY2 = ((x2 - originX) * sinr + (-y2 - originY) * cosr) + originY;
+
+
+                GL_CALL(glScissor(newX1, newY1, height, width+800));
+//                printf("cull %d %d (%d %d) %d %d\n", newX1, newY1, x1, y1, height, width );
+#else
+//                 Apply scissor/clipping rectangle (Y is inverted in OpenGL)
                 GL_CALL(glScissor((int)clip_min.x, (int)((float)fb_height - clip_max.y), (int)(clip_max.x - clip_min.x), (int)(clip_max.y - clip_min.y)));
+#endif
 
                 // Bind texture, Draw
                 GL_CALL(glBindTexture(GL_TEXTURE_2D, (GLuint)(intptr_t)pcmd->GetTexID()));
diff --git a/imgui.cpp b/imgui.cpp
index 31220bdf..556bdc86 100644
--- a/imgui.cpp
+++ b/imgui.cpp
@@ -8479,6 +8479,7 @@ static const char* const GKeyNames[] =
     "Keypad7", "Keypad8", "Keypad9", "KeypadDecimal", "KeypadDivide", "KeypadMultiply",
     "KeypadSubtract", "KeypadAdd", "KeypadEnter", "KeypadEqual",
     "AppBack", "AppForward",
+    "VolDown", "VolUp", "Hold", "Next", "Prev", "Play", "Power",
     "GamepadStart", "GamepadBack",
     "GamepadFaceLeft", "GamepadFaceRight", "GamepadFaceUp", "GamepadFaceDown",
     "GamepadDpadLeft", "GamepadDpadRight", "GamepadDpadUp", "GamepadDpadDown",
@@ -8946,7 +8947,7 @@ bool ImGui::IsMouseClicked(ImGuiMouseButton button, ImGuiInputFlags flags, ImGui
     IM_ASSERT((flags & ~ImGuiInputFlags_SupportedByIsMouseClicked) == 0); // Passing flags not supported by this function! // FIXME: Could support RepeatRate and RepeatUntil flags here.
 
     const bool repeat = (flags & ImGuiInputFlags_Repeat) != 0;
-    const bool pressed = (t == 0.0f) || (repeat && t > g.IO.KeyRepeatDelay && CalcTypematicRepeatAmount(t - g.IO.DeltaTime, t, g.IO.KeyRepeatDelay, g.IO.KeyRepeatRate) > 0);
+    const bool pressed = (t == 0.0f) || (t < 0.2f) || (repeat && t > g.IO.KeyRepeatDelay && CalcTypematicRepeatAmount(t - g.IO.DeltaTime, t, g.IO.KeyRepeatDelay, g.IO.KeyRepeatRate) > 0);
     if (!pressed)
         return false;
 
diff --git a/imgui.h b/imgui.h
index a22e7ae9..651ec16b 100644
--- a/imgui.h
+++ b/imgui.h
@@ -1420,6 +1420,13 @@ enum ImGuiKey : int
     ImGuiKey_KeypadEqual,
     ImGuiKey_AppBack,               // Available on some keyboard/mouses. Often referred as "Browser Back"
     ImGuiKey_AppForward,
+    ImGuiKey_VolumeDown,
+    ImGuiKey_VolumeUp,
+    ImGuiKey_Hold,
+    ImGuiKey_Next,
+    ImGuiKey_Prev,
+    ImGuiKey_Play,
+    ImGuiKey_Power,
 
     // Gamepad (some of those are analog values, 0.0f to 1.0f)                          // NAVIGATION ACTION
     // (download controller mapping PNG/PSD at http://dearimgui.com/controls_sheets)
diff --git a/imgui_widgets.cpp b/imgui_widgets.cpp
index d261ba8f..33316a4a 100644
--- a/imgui_widgets.cpp
+++ b/imgui_widgets.cpp
@@ -1835,6 +1835,7 @@ bool ImGui::BeginComboPopup(ImGuiID popup_id, const ImRect& bb, ImGuiComboFlags
             ImVec2 size_expected = CalcWindowNextAutoFitSize(popup_window);
             popup_window->AutoPosLastDirection = (flags & ImGuiComboFlags_PopupAlignLeft) ? ImGuiDir_Left : ImGuiDir_Down; // Left = "Below, Toward Left", Down = "Below, Toward Right (default)"
             ImRect r_outer = GetPopupAllowedExtentRect(popup_window);
+            r_outer.Max.y = 480.0f;
             ImVec2 pos = FindBestWindowPosForPopupEx(bb.GetBL(), size_expected, &popup_window->AutoPosLastDirection, r_outer, bb, ImGuiPopupPositionPolicy_ComboBox);
             SetNextWindowPos(pos);
         }
